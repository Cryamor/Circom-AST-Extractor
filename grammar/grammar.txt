PROGRAM -> HEADER PROG
HEADER -> PRAGMA CIRCOM VERSION ; | PRAGMA CUSTOM_TEMPLATES ;
PROG -> T_OR_F COMPONENT_BLOCK

T_OR_F -> TEMPLATE_STMT | TEMPLATE_STMT T_OR_F | FUNC_STMT | FUNC_STMT T_OR_F

TEMPLATE_STMT -> TEMPLATE ID ( ) { TEMPLATE_CONTENT } | TEMPLATE ID ( PARAM ) { TEMPLATE_CONTENT } | NULL

FUNC_STMT -> FUNCTION ID ( ) { STMTS } | FUNCTION ID ( PARAM ) { STMTS }
RET_STMT -> RETURN EXPR ;

PARAM -> ID_OR_NUM | PARAM , ID_OR_NUM
TEMPLATE_CONTENT -> STMTS | NULL

STMTS -> STMT | STMT STMTS
STMT -> SIGNAL_STMT | VAR_STMT | ASSIGN_STMT | C_ASSIGN_STMT | IF_STMT | WHILE_STMT | FOR_STMT | COMPONENT_STMT | RET_STMT | NULL

SIGNAL_STMT -> SIGNAL INPUT ID_OR_ARRAY ; | SIGNAL OUTPUT ID_OR_ARRAY ; | SIGNAL ID_OR_ARRAY ;
ID_OR_ARRAY -> ID | ID [ ID_OR_NUM ]
ID_OR_NUM -> ID_OR_ARRAY | NUM

VAR_STMT -> VAR_ ;
VAR_ -> VAR VAR_DEF | VAR_ , VAR_DEF
VAR_DEF -> ID_OR_ARRAY = EXPR | ID_OR_ARRAY

ASSIGN_STMT -> ID_OR_ARRAY ASSIGN EXPR ;
EXPR -> ( EXPR ) | PLUS NUM | EXPR OP ID_OR_NUM | ID_OR_NUM | ID_OR_ARRAY ( PARAM ) | ID_OR_ARRAY ( )

C_ASSIGN_STMT -> ID_OR_ARRAY C_ASSIGN EXPR ;

IF_STMT -> IF ( CONDITION ) { STMTS } ELSE { STMTS } | IF ( CONDITION ) { STMTS }

WHILE_STMT -> WHILE ( CONDITION ) { STMTS }

FOR_STMT -> FOR ( FOR_COND ) { STMTS }
FOR_COND -> VAR_STMT CONDITION ; ID_OR_ARRAY ASSIGN EXPR

CONDITION -> EXPR REL EXPR

COMPONENT_STMT -> COMP_ ;
COMP_ -> COMPONENT COMP_DEF | COMP_ , COMP_DEF
COMP_DEF -> ID_OR_ARRAY = EXPR | ID_OR_ARRAY

COMPONENT_BLOCK -> COMPONENT MAIN = ID ( ) ; | COMPONENT MAIN = ID ( PARAM ) ;

ASSIGN -> = | += | -= | *= | /= | QUOTIENT_ASSIGN | %= | &= | BITWISE_OR_ASSIGN | ^= | ~= | <<= | >>=
C_ASSIGN -> === | <-- | --> | <== | ==>
REL -> == | < | <= | > | >= | !=
PLUS -> + | -
OP -> PLUS | * | QUOTIENT | / | % | & | BITWISE_OR | ~ | ^ | << | >>