PROGRAM -> HEADER PROG
HEADER -> PRAGMA CIRCOM VERSION ; | PRAGMA CUSTOM_TEMPLATES ;
PROG -> TEMPLATE_BLOCK COMPONENT_BLOCK

TEMPLATE_BLOCK -> TEMPLATE_STMT | NULL
TEMPLATE_STMT -> TEMPLATE ID ( PARAM ) { TEMPLATE_CONTENT } | NULL
PARAM -> PARAM_ | NULL
PARAM_ -> ID | PARAM_ , ID
TEMPLATE_CONTENT -> STMTS | NULL

STMTS -> STMT | STMT STMTS
STMT -> SIGNAL_STMT | VAR_STMT | ASSIGN_STMT | C_ASSIGN_STMT | IF_STMT | WHILE_STMT | FOR_STMT | NULL

SIGNAL_STMT -> SIGNAL INPUT ID_OR_ARRAY ; | SIGNAL OUTPUT ID_OR_ARRAY ;
ID_OR_ARRAY -> ID | ID [ ID_OR_NUM ]
ID_OR_NUM -> ID_OR_ARRAY | NUM

COMPONENT_ID -> CI_ | NULL
CI_ -> ID_OR_ARRAY . CI_ | NULL

VAR_STMT -> VAR_ ; | NULL
VAR_ -> VAR VAR_DEF | VAR_ , VAR_DEF
VAR_DEF -> ID VAR_ASSIGN
VAR_ASSIGN -> = NUM | NULL

ASSIGN_STMT -> ID_OR_ARRAY ASSIGN EXPR ;
EXPR -> ( EXPR ) | PLUS EXPR | EXPR OP EXPR | ID_OR_NUM

C_ASSIGN_STMT -> ID_OR_ARRAY C_ASSIGN EXPR ;

IF_STMT -> IF ( CONDITION ) { M_IF STMTS N_IF } ELSE { M_ELSE STMTS }
M_IF -> NULL
N_IF -> NULL
M_ELSE -> NULL

WHILE_STMT -> WHILE M_BEFORE_WHILE CONDITION { M_AFTER_WHILE STMT }
M_BEFORE_WHILE -> NULL
M_AFTER_WHILE -> NULL

FOR_STMT -> FOR ( FOR_COND ) { M_FOR STMTS }
FOR_COND -> VAR_STMT ; CONDITION ; ASSIGN_STMT
M_FOR -> NULL

CONDITION -> EXPR REL EXPR

COMPONENT_BLOCK ->  COMPONENT MAIN = ID ( PARAM ) ;

ASSIGN -> = | += | -= | *= | /= | \= | %= ｜ &= ｜ BITWISE_OR_ASSIGN ｜ ^= ｜ ～= ｜ <<= | >>=
C_ASSIGN -> === | <-- | --> | <== | ==>
REL -> == | < | <= | > | >= | !=

PLUS -> + | -
OP -> PLUS | * | \ | / | % | & | BITWISE_OR | ~ | ^ | << | >>