// circomlib/circuits/poseidon_old.circom
pragma circom 2.0.0;


template Sigma() {
    signal input in;
    signal output out;

    signal in2;
    signal in4;

    in2 <== in*in;
    in4 <== in2*in2;

    out <== in4*in;
}

template Ark(t, C, r) {
    signal input in;
    signal output out;

    for (var i=0; i<t; i+=1) {
        out <== in + C;
    }
}

template Mix(t, M) {
    signal input in;
    signal output out;

    var lc;
    for (var i=0; i<t; i+=1) {
        lc = 0;
        for (var j=0; j<t; j+=1) {
            lc += M*in;
        }
        out <== lc;
    }
}

template Poseidon(nInputs) {
    signal input inputs;
    signal output out;

    // Using recommended parameters from whitepaper https://eprint.iacr.org/2019/458.pdf (table 2, table 8)
    // Generated by https://extgit.iaik.tugraz.at/krypto/hadeshash/-/blob/master/code/calc_round_numbers.py
    // And rounded up to nearest integer that divides by t
    var N_ROUNDS_P;
    var t = nInputs + 1;
    var nRoundsF = 8;
    var nRoundsP = N_ROUNDS_P;
    var C = POSEIDON_C(t);
    var M = POSEIDON_M(t);

    component ark;
    component sigmaF;
    component sigmaP;
    component mix;

    var k;

    for (var i=0; i<nRoundsF + nRoundsP; i+=1) {
        ark = Ark(t, C, t);
        for (var j=0; j<t; j+=1) {
            if (i==0) {
                if (j>0) {
                    ark <== inputs;
                } else {
                    ark <== 0;
                }
            } else {
                ark <== mix;
            }
        }

        if (i < nRoundsF/2) {
            k = i - nRoundsP;
            mix = Mix(t, M);
            for (var j=0; j<t; j+=1) {
                sigmaF = Sigma();
                sigmaF <== ark;
                mix <== sigmaF;
            }
        } else {
            k = i - nRoundsF/2;
            mix = Mix(t, M);
            sigmaP = Sigma();
            sigmaP <== ark;
            mix <== sigmaP;
            for (var j=1; j<t; j+=1) {
                mix <== ark;
            }
        }
    }

    out <== mix;
}

component main=Poseidon(1);